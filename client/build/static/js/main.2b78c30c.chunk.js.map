{"version":3,"sources":["components/Header/Header.js","components/Jumbotron/Jumbotron.js","components/Footer/Footer.js","components/Card/Card.js","components/GameRow/GameRow.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","alt","src","gameMsg","score","topScore","Jumbotron","Footer","Character","onClick","slectCard","id","name","image","GameRow","tmpArry","cardImages","startPos","startCard","Card_Card","key","App","state","CardImages","selectedCards","cardId","console","log","origArray","_this","itmsArr","indexOf","setState","push","tmpScore","tmptopScore","length","shufleArray","tgtArray","temp","index","ctr","Math","floor","random","this","Fragment","components_Header_Header","components_Jumbotron_Jumbotron","components_GameRow_GameRow","components_Footer_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2b78c30c.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./Header.css\";\r\n\r\nconst Header = (props) => (\r\n  <header className=\"header text-center\">\r\n    <div className=\"row\">\r\n      <div className=\"col-md-2\">\r\n         <img className=\"logoImg imgRnd10 imageShadow imageRotate\" \r\n              alt=\"click Game\"\r\n              src=\"./images/clickGame.png\" />       \r\n      </div>\r\n      <div className=\"col-md-4\">\r\n        <h4 className=\"gameMsg\">{props.gameMsg}</h4>\r\n      </div>\r\n      <div className=\"col-md-6\">\r\n        <h3>Score: {props.score} | Top-Score: {props.topScore}</h3>\r\n      </div>\r\n    </div>  \r\n  </header>\r\n);\r\n\r\nexport default Header;","import React from \"react\";\r\nimport \"./Jumbotron.css\";\r\n\r\nfunction Jumbotron() {\r\n  return (\r\n    <div className=\"jumbotron text-center\">\r\n      <h1>Clicky Game!</h1>\r\n      <h4>Click on an image to earn points, but don't click on any more than once!</h4>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Jumbotron;","import React from 'react';\r\nimport \"./Footer.css\";\r\n\r\nconst Footer = (props) => (\r\n  <div className=\"footer d-flex\">\r\n    <div className=\"p-2\"> \r\n      <h4>Clicky Game!</h4> \r\n    </div>\r\n    <div className=\"p-2\"> \r\n      <img className=\"footerImg\" src=\"./favicon.ico\" alt=\"React\">\r\n      </img>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Footer;","import React from 'react';\r\nimport \"./Card.css\";\r\n\r\nconst Character = (props) => (\r\n  <div className=\"card d-flex\">\r\n    <div className=\"imgHolder  d-flex align-content-center\">\r\n     <button className=\"imgBtn imgRnd10\" onClick={() => props.slectCard(props.id)}>\r\n       <img className=\"characterImg\" alt={props.name} src={props.image} />    \r\n     </button>   \r\n    </div>                                          \r\n  </div>\r\n\r\n);\r\n\r\nexport default Character;","import React from 'react';\r\nimport Card from '../Card'\r\nimport \"./GameRow.css\";\r\n\r\nconst GameRow = (props) => {\r\n\r\n  // Translate session cards into a local var\r\n  let tmpArry = props.cardImages\r\n  let startPos = props.startCard\r\n\r\n  return (\r\n    <div className=\"row gameRow\">\r\n      <div className=\"col-md-3\">\r\n        <Card \r\n            id={tmpArry[startPos].id}\r\n            key={tmpArry[startPos].id}\r\n            name={tmpArry[startPos].name}\r\n            image={tmpArry[startPos].image}\r\n            slectCard={props.slectCard}\r\n        />\r\n      </div>\r\n      <div className=\"col-md-3\">\r\n        <Card \r\n            id={tmpArry[startPos + 1].id}\r\n            key={tmpArry[startPos + 1].id}\r\n            name={tmpArry[startPos + 1].name}\r\n            image={tmpArry[startPos + 1].image}\r\n            slectCard={props.slectCard}\r\n        />\r\n      </div>\r\n      <div className=\"col-md-3\">\r\n        <Card \r\n            id={tmpArry[startPos + 2].id}\r\n            key={tmpArry[startPos + 2].id}\r\n            name={tmpArry[startPos + 2].name}\r\n            image={tmpArry[startPos + 2].image}\r\n            slectCard={props.slectCard}\r\n        />\r\n      </div>\r\n      <div className=\"col-md-3\">\r\n        <Card \r\n            id={tmpArry[startPos + 3].id}\r\n            key={tmpArry[startPos + 3].id}\r\n            name={tmpArry[startPos + 3].name}\r\n            image={tmpArry[startPos + 3].image}\r\n            slectCard={props.slectCard}\r\n        />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n  \r\nexport default GameRow;","import React, { Component } from 'react';\n\nimport Header from './components/Header'\nimport Jumbotron from './components/Jumbotron'\nimport Footer from './components/Footer'\nimport GameRow from './components/GameRow'\nimport Card from './components/Card'\nimport CardImages from \"./components/CardImages/CardImages.json\"\nimport \"./App.css\";\n\nclass App extends Component {\n\n  // Setting this.state.cardImages to the CardImages json array\n  state = {\n    cardImages : CardImages,\n    selectedCards : [],\n    score: 0,\n    topScore: 0,\n    gameMsg : ''\n  }\n  \n  componentDidMount() {\n    // shuffle cards everytime the applicaiton starts\n    this.setState( { \n      cardImages : this.shufleArray(this.state.cardImages), \n      gameMsg : \"Click an image to begin!\" \n    }) \n  }\n\n  // button select a card event\n  slectCard = cardId => {\n    console.log('CardID',cardId)\n    // verify entry to continue the game\n    let origArray = this.state.cardImages\n    let itmsArr = this.state.selectedCards\n    if(itmsArr.indexOf(cardId) !== -1) {\n       // Duplicate entry, game over\n       console.log('game over')\n       itmsArr = []\n       this.setState({ \n         score : 0, selectedCards : itmsArr, \n         gameMsg : \"Game over, click to start again!\" \n       })\n    }else {\n      // new selection continue the game\n      itmsArr.push(cardId)\n      let tmpScore = this.state.score + 1\n      let tmptopScore = this.state.topScore\n      if (tmptopScore < tmpScore ) {\n        tmptopScore = tmpScore\n        this.setState( { topScore : tmptopScore })\n      }\n      \n      if(origArray.length === itmsArr.length) {\n        this.setState( { score : tmpScore, selectedCards : itmsArr, gameMsg : \"YOUR WIN!\" })  \n      }\n      else  {\n        this.setState( { score : tmpScore, selectedCards : itmsArr, gameMsg : \"Good selection!\" })  \n      }\n        \n    }\n    \n    console.log(this.state.selectedCards)\n    // Change the state this will force a refresh\n    // ref: https://medium.freecodecamp.org/force-refreshing-a-react-child-component-the-easy-way-6cdbb9e6d99c\n    // shuffle cards and save\n    this.setState( { cardImages : this.shufleArray(this.state.cardImages) })\n  }\n\n  // Render to screen \n  render() {\n\n    return (\n      <>\n        <Header gameMsg={this.state.gameMsg} score={this.state.score} topScore ={this.state.topScore}/>\n        <Jumbotron />\n\n        <div className=\"container\">   \n          \n        <GameRow \n             startCard = {0}\n             cardImages = {this.state.cardImages}\n             slectCard = {this.slectCard}\n        /> \n        <GameRow \n             startCard = {4}\n             cardImages = {this.state.cardImages}\n             slectCard = {this.slectCard}\n        /> \n        <GameRow \n             startCard = {8}\n             cardImages = {this.state.cardImages}\n             slectCard = {this.slectCard}\n        /> \n\n        </div>\n      \n        <Footer />\n      </>\n    )\n  }\n  \n  // General functions ...................................................\n  // Shuffle an array\n  shufleArray = tgtArray => {\n    let ctr = tgtArray.length\n    let temp\n    let index\n    // Reorganize array\n    while(ctr > 0) {\n      // random index \n      index = Math.floor(Math.random() * ctr)\n      ctr --\n      temp = tgtArray[ctr]\n      tgtArray[ctr] = tgtArray[index]\n      tgtArray[index] = temp\n    }\n    return tgtArray\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport \"./index.css\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}